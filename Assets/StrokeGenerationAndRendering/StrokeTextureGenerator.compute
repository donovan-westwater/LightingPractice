// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2DArray<float4> _Results : register(u0);
int resolution;
SamplerState sampler_LinearClamp;

//USE SHARED INSTEAD OF static!
//HOWEVER WE ALSO NEED TO SYNC WITH BARRIERS!
float goalVal = 0.99;//0.875;
globallycoherent RWStructuredBuffer<float> mipGoals;
globallycoherent RWStructuredBuffer<uint> mipPixels;
uint rng_state;
struct Stroke {
    float2 normPos;
    float normLength;
    //Add more strange stroke behavior later via compliler derectives in functions/ this struct
};
//Found here:https://gist.github.com/keijiro/ee7bc388272548396870#file-prng-cginc-L1
//VERY COMMON PSUEDO RANDOM FUNCTION!
float nrand(float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}
//From this article: https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
uint rand_pcg()
{
    uint state = rng_state;
    rng_state = rng_state * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}
uint pcg_hash(uint input)
{
    uint state = input * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}
float hash_rand(uint input) {
    uint r = pcg_hash(input);
    return (float)r * (1.0 / 4294967296.0);
}
float pcg_float() {
    uint r = rand_pcg();
    return (float)r * (1.0 / 4294967296.0);
}
Stroke StrokeRandomizer(float2 uv) {
    uint seed = (uint)uv.x + resolution * (uint)uv.y;
    float x = hash_rand(seed);
    seed = seed << 3;
    float y = hash_rand(seed);
    seed = seed | 273809707u;
    float l = 0.3+0.2*hash_rand(seed); //(.3 - 1.0) range
    Stroke s;
    s.normPos = float2(x, y);
    s.normLength = l;
    return s;
}
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //_Results[uint3(id.x, id.y, 0)] = float4(hash_rand(id.x+resolution*id.y),0,0,1); //Hash rand is good for randomness!
    // TODO: insert actual code here!
    Stroke s = StrokeRandomizer(float2(id.x, id.y));
    for (int j = 7; j >= 0; j--) {
        int mipRes = resolution >> j;
        if ((id.x > mipRes || id.y > mipRes)) _Results[uint3(id.x, id.y, j)] = 1.0;
        else {
            //_Results[uint3(id.x, id.y, j)] = float4(j / 7.0, (id.x & 15) / 15.0, (id.y & 15) / 15.0, 1.0);
            uint2 pixelPos = uint2((uint)(s.normPos.x*mipRes), (uint)(s.normPos.y * mipRes));
            uint pixelLength = (uint)(mipRes * s.normLength);
            for (int sc = 0; sc < pixelLength; sc++) {
                if (pixelPos.x + sc > mipRes || mipGoals[j] < goalVal) break;
                mipPixels[j]++;
                float totalPixels = (float)(mipRes * mipRes);
                mipGoals[j] = (totalPixels - (float)mipPixels[j])/totalPixels;
                float pixelPct = (float)mipPixels[j] / totalPixels;
                _Results[uint3(pixelPos.x + sc, pixelPos.y, j)] = float4(pixelPct, 0.0, 1.0, 1.0);
            }
            
        }
    }
    //_Results[uint3(id.x,id.y,0)] = float4(0, (id.x & 15) / 15.0, (id.y & 15) / 15.0, 1.0);
    //_Results[uint3(id.x, id.y, 1)] = float4(1.0, 0.0,0.0, 0.0);
    //if (id.z > 0)_Results[uint3(id.x, id.y, id.z)] = float4(0, 0, 0, 0);
    
}
